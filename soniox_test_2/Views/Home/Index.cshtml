@{
    ViewData["Title"] = "Home Page";
}

<style>
  body {
    background: #000000 !important;
    color: #fff;
    transition: background 0.3s, color 0.3s;
  }
  body.light-mode {
    background: #fff !important;
    color: #111;
  }
  body.light-mode .recording-indicator {
    background: #ffbdbd;
    color: #b71c1c;
  }
  body.light-mode .recording-text {
    color: #b71c1c;
  }
  body.light-mode .record-circular-btn,
  body.light-mode .hamburger-circular-btn,
  body.light-mode .settings-circular-btn {
    background: #e3e3e3;
    color: #1976d2;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  }
  body.light-mode .record-circular-btn .fa-microphone,
  body.light-mode .record-circular-btn .fa-stop,
  body.light-mode .hamburger-circular-btn .fa-history,
  body.light-mode .settings-circular-btn .fa-cog {
    color: #1976d2;
  }
  body.light-mode .settings-panel {
    background: #f7f7f7;
    color: #222;
  }
  body.light-mode .close-settings-btn {
    color: #222;
  }
  body.light-mode .close-settings-btn:hover {
    color: #d32f2f;
  }
  body.light-mode #tvSubtitleLine1,
  body.light-mode #tvSubtitleLine2 {
    background: #fff !important;
    color: #111 !important;
    border: 1px solid #e0e0e0;
  }
  .record-circular-btn {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    background: #1976d2;
    color: #fff;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    border: none;
    transition: background 0.2s;
  }
  .record-circular-btn:active, .record-circular-btn:focus {
    background: #115293;
    outline: none;
  }
  .hamburger-circular-btn {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    background: #1976d2;
    color: #fff;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    border: none;
    transition: background 0.2s;
  }
  .hamburger-circular-btn:active, .hamburger-circular-btn:focus {
    background: #115293;
    outline: none;
  }
  .hamburger-circular-btn .fa-bars {
    color: #fff;
  }
  .recording-indicator {
    width: auto;
    min-width: 82px;
    height: 28px;
    background: #d32f2f;
    color: #fff;
    border-radius: 7px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.05rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    padding: 0 0.7em;
    transition: opacity 0.2s;
    margin-bottom: 0.5em;
    line-height: 1;
  }
  .recording-indicator .fa-broadcast-tower {
    font-size: 1em;
    color: #fff;
  }
  .recording-text {
    font-size: 1em;
    margin-left: 0;
    font-weight: 500;
    letter-spacing: 0.01em;
    white-space: nowrap;
    line-height: 1;
  }
  .settings-circular-btn {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    background: transparent;
    color: #fff;
    box-shadow: none;
    border: none;
    transition: background 0.2s;
    cursor: pointer;
  }
  .settings-circular-btn:active, .settings-circular-btn:focus {
    background: rgba(255,255,255,0.08);
    outline: none;
  }
  .settings-circular-btn .fa-cog {
    color: #fff;
  }
  .settings-panel {
    position: fixed;
    top: 0;
    right: 0;
    height: 100vh;
    width: 340px;
    max-width: 90vw;
    background: #181818;
    color: #fff;
    box-shadow: -2px 0 16px rgba(0,0,0,0.25);
    z-index: 2000;
    transform: translateX(100%);
    transition: transform 0.35s cubic-bezier(0.4,0,0.2,1);
    display: flex;
    flex-direction: column;
    padding: 0;
    overflow-y: auto;
  }
  .settings-panel.open {
    transform: translateX(0);
  }
  .settings-panel-content {
    padding: 2em 1.5em 1.5em 1.5em;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
  }
  .close-settings-btn {
    position: absolute;
    top: 18px;
    right: 18px;
    background: none;
    border: none;
    color: #fff;
    font-size: 2rem;
    cursor: pointer;
    z-index: 10;
    transition: color 0.2s;
  }
  .close-settings-btn:hover {
    color: #d32f2f;
  }
  /* Toggle Switch Styles */
  .switch {
    position: relative;
    display: inline-block;
    width: 44px;
    height: 24px;
  }
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 24px;
  }
  .slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
    box-shadow: 0 1px 4px rgba(0,0,0,0.15);
  }
  .switch input:checked + .slider {
    background-color: #1976d2;
  }
  .switch input:checked + .slider:before {
    transform: translateX(20px);
  }
  /* Transcription text size classes */
  .transcription-size-small #transcriptionText,
  .transcription-size-small #tvSubtitleLine1,
  .transcription-size-small #tvSubtitleLine2,
  .transcription-size-small #tvSubtitleLine3,
  .transcription-size-small #tvSubtitleLine4,
  .transcription-size-small #tvSubtitleLine5 {
    font-size: 1.2rem !important;
  }
  .transcription-size-medium #transcriptionText,
  .transcription-size-medium #tvSubtitleLine1,
  .transcription-size-medium #tvSubtitleLine2,
  .transcription-size-medium #tvSubtitleLine3,
  .transcription-size-medium #tvSubtitleLine4,
  .transcription-size-medium #tvSubtitleLine5 {
    font-size: 2rem !important;
  }
  .transcription-size-large #transcriptionText,
  .transcription-size-large #tvSubtitleLine1,
  .transcription-size-large #tvSubtitleLine2,
  .transcription-size-large #tvSubtitleLine3,
  .transcription-size-large #tvSubtitleLine4,
  .transcription-size-large #tvSubtitleLine5 {
    font-size: 2.8rem !important;
  }
  .subtitle-container {
    position: absolute;
    bottom: 2em;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    min-height: calc(2.8rem * 5 + 1.5em); /* 5 lines of largest text + padding */
    max-height: calc(2.8rem * 5 + 1.5em);
    align-items: flex-end;
    pointer-events: none;
  }
  #tvSubtitleBar {
    width: 90%;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 0.2em;
    perspective: 100px;
    min-height: calc(2.8rem * 5 + 1.5em);
    max-height: calc(2.8rem * 5 + 1.5em);
    overflow: hidden;
    margin: 0 auto;
    justify-content: flex-end;
  }
  #tvSubtitleLine1, #tvSubtitleLine2 {
    display: block;
    text-align: left;
    padding: 0.1em 0.3em;
    min-height: 1.5em;
    line-height: 1.25;
    color: white;
    transition: opacity 0.3s ease, transform 0.4s ease;
    word-break: break-word;
    white-space: normal;
    width: 100%;
    box-sizing: border-box;
    overflow-wrap: break-word;
    overflow: visible;
    font-size: inherit;
  }
  .transcription-size-small #tvSubtitleLine1,
  .transcription-size-small #tvSubtitleLine2 {
    font-size: 1.2rem !important;
  }
  .transcription-size-medium #tvSubtitleLine1,
  .transcription-size-medium #tvSubtitleLine2 {
    font-size: 2rem !important;
  }
  .transcription-size-large #tvSubtitleLine1,
  .transcription-size-large #tvSubtitleLine2 {
    font-size: 2.8rem !important;
  }
  #transcriptionText {
    width: 100%;
    min-height: 4em;
    max-height: 30vh;
    resize: vertical;
    overflow-y: auto;
    font-family: inherit;
    word-break: break-word;
    white-space: pre-wrap;
    box-sizing: border-box;
  }
</style>

<div class="text-center" style="position:relative;width:100%;margin:20em auto 0 auto;">
    <div class="titilePicture" style="margin-bottom:0;position:relative;aspect-ratio:16/9;overflow:hidden;">
        
    </div>
    <div class="subtitle-container" style="position:absolute;bottom:2em;left:0;right:0;display:flex;justify-content:center;">
        <div id="tvSubtitleBar" style="width:90%;display:flex;flex-direction:column;align-items:flex-start;gap:0.2em;perspective:100px;max-height:6.5rem;overflow:hidden;">
            <div id="tvSubtitleLine1" style="display:table;text-align:left;padding:0.1em 0.3em;min-height:1.5em;line-height:1.25;font-size:2rem;color:white;transition:opacity 0.3s ease, transform 0.4s ease;"></div>
            <div id="tvSubtitleLine2" style="display:table;text-align:left;padding:0.1em 0.3em;min-height:1.5em;line-height:1.25;font-size:2rem;color:white;transition:opacity 0.3s ease, transform 0.4s ease;"></div>
            <div id="tvSubtitleLine3" style="display:table;text-align:left;padding:0.1em 0.3em;min-height:1.5em;line-height:1.25;font-size:2rem;color:white;transition:opacity 0.3s ease, transform 0.4s ease;"></div>
            <div id="tvSubtitleLine4" style="display:table;text-align:left;padding:0.1em 0.3em;min-height:1.5em;line-height:1.25;font-size:2rem;color:white;transition:opacity 0.3s ease, transform 0.4s ease;"></div>
            <div id="tvSubtitleLine5" style="display:table;text-align:left;padding:0.1em 0.3em;min-height:1.5em;line-height:1.25;font-size:2rem;color:white;transition:opacity 0.3s ease, transform 0.4s ease;"></div>
            <span id="subtitleMeasure" style="visibility:hidden;position:absolute;left:-9999px;font-size:2rem;"></span>
        </div>
    </div>
</div>

<div class="text-center mt-4" style="display:flex;flex-direction:column;align-items:center;gap:1em;width:100%;">
    <div style="display:flex;flex-direction:column;align-items:center;width:100%;">
        <div id="recordingIndicator" class="recording-indicator" style="display:none;">
            <span class="recording-text">poslušam</span>
        </div>
        <div style="display:flex;align-items:center;gap:1em;justify-content:center;width:100%;">
            <button id="recordButton" class="btn btn-primary btn-lg record-circular-btn">
                <span class="fas fa-microphone"></span>
            </button>
            <button id="transcriptionDropdownBtn" class="btn btn-secondary btn-lg hamburger-circular-btn">
                <span class="fas fa-history"></span>
            </button>
        </div>
    </div>
</div>

<button id="settingsButton" class="settings-circular-btn" style="position: absolute; top: 24px; right: 24px; z-index: 1000;">
    <span class="fas fa-cog"></span>
</button>

<audio id="audioPlayback" controls class="mt-3 d-none"></audio>
<div id="transcriptionDropdown" class="mt-3" style="display:block;max-height:0;overflow:hidden;opacity:0;transition:max-height 0.4s cubic-bezier(0.4,0,0.2,1), opacity 0.3s;">
    <label for="transcriptionText">Live Transcription:</label>
    <textarea id="transcriptionText" class="form-control" rows="6" readonly></textarea>
</div>

<div id="settingsPanel" class="settings-panel">
    <!-- Settings content will be loaded here dynamically -->
</div>

@section Scripts {
    <script>
        let isRecording = false;
        let mediaRecorder;
        let ws;
        let finalText = '';
        let finalTranscriptWithSpeakers = '';
        let lastSpeakerForFinal = null;
        let lastSpeakerForPartial = null;
        
        const recordButton = document.getElementById('recordButton');
        const audioPlayback = document.getElementById('audioPlayback');
        const transcriptionText = document.getElementById('transcriptionText');
        const tvSubtitleLines = [
            document.getElementById('tvSubtitleLine1'),
            document.getElementById('tvSubtitleLine2'),
            document.getElementById('tvSubtitleLine3'),
            document.getElementById('tvSubtitleLine4'),
            document.getElementById('tvSubtitleLine5')
        ];
        const MAX_SUBTITLE_LINES = 5;
        let previousLines = ['', '', '', '', ''];
        let isAnimating = false;

        let speakerTranscriptFinal = []; // Array of {speaker, text}
        let speakerTranscriptPartial = '';
        let lastFinalTokenIndex = 0;
        let lastSpeakerForTranscript = null;

        function updateLineAppearance(lines) {
            for (let i = 0; i < MAX_SUBTITLE_LINES; i++) {
                if (lines[i] && lines[i].trim()) {
                    tvSubtitleLines[i].style.background = 'rgba(0,0,0,0.9)';
                    tvSubtitleLines[i].style.visibility = 'visible';
            } else {
                    tvSubtitleLines[i].style.background = 'transparent';
                    tvSubtitleLines[i].style.visibility = 'hidden';
                }
            }
        }

        function updateSubtitleBar() {
            if (isAnimating) return;

            let maxWidth = tvSubtitleBar.clientWidth - 32;
            let allLines = wrapTextToLines(subtitleFullText, maxWidth);

            // Get the last 5 lines (oldest at top, newest at bottom)
            let newLines = [];
            for (let i = 0; i < MAX_SUBTITLE_LINES; i++) {
                newLines[i] = allLines[allLines.length - MAX_SUBTITLE_LINES + i] || '';
            }

            // Simple update for now (animation logic can be fixed later)
            for (let i = 0; i < MAX_SUBTITLE_LINES; i++) {
                tvSubtitleLines[i].textContent = newLines[i];
            }
            updateLineAppearance(newLines);
            previousLines = newLines;
        }
        
        function wrapTextToLines(text, maxWidthPx) {
            const words = text.split(' ');
            if (words.length === 0) return [];
            
            const lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                let testLine = currentLine + ' ' + words[i];
                subtitleMeasure.textContent = testLine;
                if (subtitleMeasure.offsetWidth < maxWidthPx) {
                    currentLine = testLine;
                } else {
                    lines.push(currentLine);
                    currentLine = words[i];
                }
            }
            lines.push(currentLine);
            return lines;
        }

        function appendTranscription(text, tokens) {
            let showSpeaker = (localStorage.getItem('speakerDiarization') === 'true');
            if (showSpeaker && tokens && tokens.length > 0) {
                let nonFinalText = '';
                lastSpeakerForPartial = null;
                for (const token of tokens) {
                    if (token.text) {
                        if (token.is_final) {
                            if (token.speaker !== lastSpeakerForFinal) {
                                finalTranscriptWithSpeakers += (finalTranscriptWithSpeakers ? '\n' : '') + `Speaker ${token.speaker}: `;
                                lastSpeakerForFinal = token.speaker;
                            }
                            finalTranscriptWithSpeakers += token.text;
                        } else {
                            if (token.speaker !== lastSpeakerForPartial) {
                                nonFinalText += (nonFinalText ? '\n' : '') + `Speaker ${token.speaker}: `;
                                lastSpeakerForPartial = token.speaker;
                            }
                            nonFinalText += token.text;
                        }
                    }
                }
                let displayText = finalTranscriptWithSpeakers + (nonFinalText ? ('\n' + nonFinalText) : '');
                transcriptionText.value = displayText;
                subtitleFullText = displayText;
            } else {
                finalTranscriptWithSpeakers = '';
                lastSpeakerForFinal = null;
                lastSpeakerForPartial = null;
                transcriptionText.value = text;
                subtitleFullText = text;
            }
            updateSubtitleBar();
        }

        function updateSpeakerTranscript(tokens) {
            let showSpeaker = (localStorage.getItem('speakerDiarization') === 'true');
            console.log('[DEBUG] updateSpeakerTranscript called, showSpeaker:', showSpeaker, 'tokens:', tokens);
            
            if (!showSpeaker) {
                speakerTranscriptContainer.style.display = 'none';
                speakerTranscript.innerHTML = '';
                speakerTranscriptFinal = [];
                speakerTranscriptPartial = '';
                lastFinalTokenIndex = 0;
                lastSpeakerForTranscript = null;
                return;
            }
            speakerTranscriptContainer.style.display = 'block';

            // Accumulate finalized tokens per speaker
            let i = lastFinalTokenIndex;
            while (tokens && i < tokens.length) {
                const token = tokens[i];
                if (token.is_final && token.text) {
                    console.log('[DEBUG] Processing final token:', token);
                    if (
                        speakerTranscriptFinal.length === 0 ||
                        speakerTranscriptFinal[speakerTranscriptFinal.length - 1].speaker !== token.speaker
                    ) {
                        speakerTranscriptFinal.push({ speaker: token.speaker, text: token.text });
                        console.log('[DEBUG] Added new speaker entry:', token.speaker, token.text);
                    } else {
                        speakerTranscriptFinal[speakerTranscriptFinal.length - 1].text += token.text;
                        console.log('[DEBUG] Appended to existing speaker:', token.speaker, token.text);
                    }
                    lastFinalTokenIndex = i + 1;
                }
                i++;
            }

            // Find the last speaker for partial tokens
            let lastSpeaker = speakerTranscriptFinal.length > 0 ? speakerTranscriptFinal[speakerTranscriptFinal.length - 1].speaker : null;
            let partialText = '';
            if (tokens) {
                for (let j = lastFinalTokenIndex; j < tokens.length; j++) {
                    const token = tokens[j];
                    if (token.text) {
                        if (token.speaker !== lastSpeaker) {
                            // Speaker changed in partial
                            partialText += (partialText ? '<br>' : '') + `<b>Speaker ${token.speaker}:</b> `;
                            lastSpeaker = token.speaker;
                        }
                        partialText += token.text;
                    }
                }
            }

            // Render transcript
            let html = '';
            let prevSpeaker = null;
            for (const entry of speakerTranscriptFinal) {
                if (entry.speaker !== prevSpeaker) {
                    html += (html ? '<br>' : '') + `<b>Speaker ${entry.speaker}:</b> `;
                    prevSpeaker = entry.speaker;
                }
                html += entry.text;
            }
            if (partialText) {
                html += (html ? '<br>' : '') + partialText;
            }
            
            console.log('[DEBUG] Final HTML for speaker transcript:', html);
            speakerTranscript.innerHTML = html;
            speakerTranscriptContainer.scrollTop = speakerTranscriptContainer.scrollHeight;
        }

        // Dropdown toggle for transcription box with animation
        transcriptionDropdownBtn.addEventListener('click', () => {
            if (transcriptionDropdown.style.maxHeight === '0px' || !transcriptionDropdown.style.maxHeight) {
                transcriptionDropdown.style.display = 'block';
                transcriptionDropdown.style.maxHeight = '500px'; // enough for textarea
                transcriptionDropdown.style.opacity = '1';
            } else {
                transcriptionDropdown.style.maxHeight = '0px';
                transcriptionDropdown.style.opacity = '0';
                setTimeout(() => {
                    if (transcriptionDropdown.style.maxHeight === '0px') {
                        transcriptionDropdown.style.display = 'block'; // keep block for transition
                    }
                }, 400);
            }
        });

        // Helper: split text into sentences (simple, based on punctuation)
        function splitSentences(text) {
            // Split on . ! ? followed by space or end of string
            return text.match(/[^.!?\n]+[.!?]+(\s|$)/g) || [];
        }

        let nonFinalBuffer = '';
        let blinkInterval = null;

        function stopRecording() {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                // Toggle icon to mic with null check
                const recordIcon = document.querySelector('#recordButton .fas');
                if (recordIcon) {
                recordIcon.className = 'fas fa-microphone';
                }
                recordingIndicator.style.display = 'none';
                if (blinkInterval) clearInterval(blinkInterval);
                blinkInterval = null;
                subtitleFullText = '';
                updateSubtitleBar();
                nonFinalBuffer = '';
                finalTranscriptWithSpeakers = '';
                lastSpeakerForFinal = null;
                lastSpeakerForPartial = null;
                console.log('[DEBUG] Stopped recording');
            }
        }

        recordButton.addEventListener('click', async () => {
            if (!isRecording) {
                // Start recording
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    alert('Your browser does not support audio recording.');
                    return;
                }
                try {
                    ws = new WebSocket((location.protocol === 'https:' ? 'wss://' : 'ws://') + location.host + '/ws/transcribe');
                    ws.binaryType = 'arraybuffer';
                    ws.onopen = () => {
                        console.log('[DEBUG] WebSocket connection opened');
                        // Always send config as first message
                        ws.send(JSON.stringify({
                            enable_speaker_diarization: localStorage.getItem('speakerDiarization') === 'true'
                        }));
                    };
                    ws.onclose = (event) => {
                        console.log('[DEBUG] WebSocket connection closed', event);
                        ws = null;
                    };
                    ws.onerror = (event) => {
                        console.error('[ERROR] WebSocket error', event);
                    };
                    ws.onmessage = (event) => {
                        console.log('[DEBUG] WebSocket message received', event.data);
                        try {
                            const data = JSON.parse(event.data);
                            if (data && data.tokens) {
                                let nonFinalText = '';
                                for (const token of data.tokens) {
                                    if (token.text) {
                                        if (token.is_final) {
                                            finalText += token.text;
                                            nonFinalBuffer += token.text;
                                        } else {
                                            nonFinalText += token.text;
                                        }
                                    }
                                }
                                appendTranscription(finalText + nonFinalText, data.tokens);
                            }
                        } catch (e) {
                            console.warn('[WARN] Failed to parse transcription message', e);
                        }
                    };

                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });
                    mediaRecorder.ondataavailable = function (e) {
                        if (e.data && e.data.size > 0 && ws && ws.readyState === WebSocket.OPEN) {
                            e.data.arrayBuffer().then(buffer => {
                                ws.send(buffer);
                                console.log('[DEBUG] Sent audio chunk to backend', buffer.byteLength, 'bytes');
                            });
                        }
                    };
                    mediaRecorder.onstop = function () {
                        stream.getTracks().forEach(track => track.stop());
                        audioPlayback.classList.add('d-none');
                        if (ws && ws.readyState === WebSocket.OPEN) ws.close();
                        console.log('[DEBUG] Stopped recording and closed audio/WebSocket');
                    };
                    mediaRecorder.start(250); // send audio chunks every 250ms

                    isRecording = true;
                    // Toggle icon to stop with null check
                    const recordIcon = document.querySelector('#recordButton .fas');
                    if (recordIcon) {
                    recordIcon.className = 'fas fa-stop';
                    }
                    recordingIndicator.style.display = 'flex';
                    audioPlayback.classList.add('d-none');
                    subtitleFullText = '';
                    updateSubtitleBar();
                    nonFinalBuffer = '';
                    
                    console.log('[DEBUG] Started recording');
                } catch (err) {
                    alert('Could not start audio recording: ' + err.message);
                    console.error('[ERROR] Could not start audio recording', err);
                }
            } else {
                // Stop recording manually
                stopRecording();
            }
        });

        settingsButton.addEventListener('click', function() {
            if (!settingsPanel.classList.contains('open')) {
                fetch('/Home/SettingsPanel')
                    .then(response => response.text())
                    .then(html => {
                        settingsPanel.innerHTML = html;
                        settingsPanel.classList.add('open');
                        // Set switch state to match current mode
                        const darkModeSwitch = document.getElementById('darkModeSwitch');
                        if (darkModeSwitch) {
                            darkModeSwitch.checked = !document.body.classList.contains('light-mode');
                        }
                        // Speaker diarization logic
                        const speakerSwitch = document.getElementById('speakerDiarizationSwitch');
                        if (speakerSwitch) {
                            // Set initial state from localStorage
                            speakerSwitch.checked = localStorage.getItem('speakerDiarization') === 'true';
                            // Save to localStorage on change
                            speakerSwitch.onchange = function() {
                                localStorage.setItem('speakerDiarization', speakerSwitch.checked ? 'true' : 'false');
                            };
                        }
                        // Add close event
                        const closeBtn = document.getElementById('closeSettingsPanel');
                        if (closeBtn) {
                            closeBtn.onclick = function() {
                                settingsPanel.classList.remove('open');
                                setTimeout(() => { settingsPanel.innerHTML = ''; }, 350);
                            };
                        }
                        // Text size logic
                        function setTranscriptionSize(size) {
                            document.body.classList.remove('transcription-size-small', 'transcription-size-medium', 'transcription-size-large');
                            if (size === 'large') {
                                document.body.classList.add('transcription-size-large');
                            } else if (size === 'medium') {
                                document.body.classList.add('transcription-size-medium');
                            } else {
                                document.body.classList.add('transcription-size-small');
                            }
                            localStorage.setItem('transcriptionTextSize', size);
                        }
                        // On page load, set transcription size from localStorage
                        setTranscriptionSize(localStorage.getItem('transcriptionTextSize') || 'medium');
                        // Listen for dropdown changes globally
                        // (in case settings panel is loaded dynamically)
                        document.body.addEventListener('change', function(e) {
                            if (e.target && e.target.id === 'transcriptionTextSize') {
                                setTranscriptionSize(e.target.value);
                            }
                        });
                        // When settings panel is opened, sync dropdown to current value
                        setTimeout(() => {
                            const transcriptionTextSize = localStorage.getItem('transcriptionTextSize') || 'medium';
                            const dropdown = document.getElementById('transcriptionTextSize');
                            if (dropdown) dropdown.value = transcriptionTextSize;
                        }, 100);
                    });
            }
        });

        // Dark/Light mode logic
        function setMode(isDark) {
            if (isDark) {
                document.body.classList.remove('light-mode');
                localStorage.setItem('darkMode', 'true');
            } else {
                document.body.classList.add('light-mode');
                localStorage.setItem('darkMode', 'false');
            }
        }
        // On page load, set mode from localStorage
        setMode(localStorage.getItem('darkMode') !== 'false');
    </script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
}